
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/00-fluent/mixing_elbow_settings_api.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_00-fluent_mixing_elbow_settings_api.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_00-fluent_mixing_elbow_settings_api.py:

.. _ref_mixing_elbow_settings_api_beta:

Fluent Setup and Solutoin using Settings API (Beta)
-----------------------------------------------------
This example illustrates the setup and solution of a three-dimensional
turbulent fluid flow and heat transfer problem in a mixing elbow. The mixing
elbow configuration is encountered in piping systems in power plants and
process industries. It is often important to predict the flow field and
temperature field in the area of the mixing region in order to properly design
the junction.

This example demonstrates use of 'settings' modules (Beta):

- Launch Ansys Fluent
- Import Mesh
- Define Material
- Setup Cell Zone Conditions
- Setup Boundary Conditions
- Iniialize and Solve
- Compute Mass Flow Rate and Temperature
- Display Mesh and Contour using PyVista

Problem Description:
A cold fluid at 20 deg C flows into the pipe through a large inlet, and mixes
with a warmer fluid at 40 deg C that enters through a smaller inlet located at
the elbow. The pipe dimensions are in inches and the fluid properties and
boundary conditions are given in SI units. The Reynolds number for the flow at
the larger inlet is 50, 800, so a turbulent flow model will be required.

.. GENERATED FROM PYTHON SOURCE LINES 30-32

.. code-block:: default

    # sphinx_gallery_thumbnail_number = 2








.. GENERATED FROM PYTHON SOURCE LINES 33-35

First, download the mesh file and start Fluent as a service with
Solver Mode, Double Precision, Number of Processors 2

.. GENERATED FROM PYTHON SOURCE LINES 35-46

.. code-block:: default


    import ansys.fluent.core as pyfluent
    from ansys.fluent.core import examples
    from ansys.fluent.post import set_config
    from ansys.fluent.post.pyvista import Graphics

    set_config(blocking=True, set_view_on_display="isometric")

    import_filename = examples.download_file("mixing_elbow.msh.h5", "pyfluent/mixing_elbow")

    session = pyfluent.launch_fluent(precision="double", processor_count=2)







.. GENERATED FROM PYTHON SOURCE LINES 47-53

Import mesh and perform mesh check:
The mesh check will list the minimum and maximum x, y, and z values from the
mesh in the default SI unit of meters. It will also report a number of other
mesh features that are checked. Any errors in the mesh will be reported at
this time. Ensure that the minimum volume is not negative, since Ansys Fluent
cannot begin a calculation when this is the case.

.. GENERATED FROM PYTHON SOURCE LINES 53-57

.. code-block:: default


    session.solver.root.file.read(file_type="case", file_name=import_filename)
    session.solver.tui.mesh.check()








.. GENERATED FROM PYTHON SOURCE LINES 58-64

Set the working units for the mesh:
select "in" to set inches as the working unit for length. Note:  Because the
default SI units will be used for everything except length, there is no need
to change any other units in this problem. If you want a different working
unit for length, other than inches (for example, millimeters), make the
appropriate change.

.. GENERATED FROM PYTHON SOURCE LINES 64-67

.. code-block:: default


    session.solver.tui.define.units("length", "in")








.. GENERATED FROM PYTHON SOURCE LINES 68-69

Enable heat transfer by activating the energy equation.

.. GENERATED FROM PYTHON SOURCE LINES 69-72

.. code-block:: default


    session.solver.root.setup.models.energy.enabled = True








.. GENERATED FROM PYTHON SOURCE LINES 73-74

Create a new material called water-liquid.

.. GENERATED FROM PYTHON SOURCE LINES 74-79

.. code-block:: default


    session.solver.root.setup.materials.copy_database_material_by_name(
        type="fluid", name="water-liquid"
    )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    False



.. GENERATED FROM PYTHON SOURCE LINES 80-82

Set up the cell zone conditions for the fluid zone (elbow-fluid). Select
water-liquid from the Material list.

.. GENERATED FROM PYTHON SOURCE LINES 82-87

.. code-block:: default


    session.solver.root.setup.cell_zone_conditions.fluid[
        "elbow-fluid"
    ].material = "water-liquid"








.. GENERATED FROM PYTHON SOURCE LINES 88-97

Set up the boundary conditions for the inlets, outlet, and walls for your CFD
analysis.
cold inlet (cold-inlet), Setting: Value:
Velocity Specification Method: Magnitude, Normal to Boundary
Velocity Magnitude: 0.4 [m/s]
Specification Method: Intensity and Hydraulic Diameter
Turbulent Intensity: 5 [%]
Hydraulic Diameter: 4 [inch]
Temperature: 293.15 [K]

.. GENERATED FROM PYTHON SOURCE LINES 97-116

.. code-block:: default


    session.solver.root.setup.boundary_conditions.velocity_inlet["cold-inlet"].vmag = {
        "option": "constant or expression",
        "constant": 0.4,
    }
    session.solver.root.setup.boundary_conditions.velocity_inlet[
        "cold-inlet"
    ].ke_spec = "Intensity and Hydraulic Diameter"
    session.solver.root.setup.boundary_conditions.velocity_inlet[
        "cold-inlet"
    ].turb_intensity = 5
    session.solver.root.setup.boundary_conditions.velocity_inlet[
        "cold-inlet"
    ].turb_hydraulic_diam = "4 [in]"
    session.solver.root.setup.boundary_conditions.velocity_inlet["cold-inlet"].t = {
        "option": "constant or expression",
        "constant": 293.15,
    }








.. GENERATED FROM PYTHON SOURCE LINES 117-124

hot inlet (hot-inlet), Setting: Value:
Velocity Specification Method: Magnitude, Normal to Boundary
Velocity Magnitude: 1.2 [m/s]
Specification Method: Intensity and Hydraulic Diameter
Turbulent Intensity: 5 [%]
Hydraulic Diameter: 1 [inch]
Temperature: 313.15 [K]

.. GENERATED FROM PYTHON SOURCE LINES 124-140

.. code-block:: default


    session.solver.root.setup.boundary_conditions.velocity_inlet["hot-inlet"].vmag = {
        "option": "constant or expression",
        "constant": 1.2,
    }
    session.solver.root.setup.boundary_conditions.velocity_inlet[
        "hot-inlet"
    ].ke_spec = "Intensity and Hydraulic Diameter"
    session.solver.root.setup.boundary_conditions.velocity_inlet[
        "hot-inlet"
    ].turb_hydraulic_diam = "1 [in]"
    session.solver.root.setup.boundary_conditions.velocity_inlet["hot-inlet"].t = {
        "option": "constant or expression",
        "constant": 313.15,
    }








.. GENERATED FROM PYTHON SOURCE LINES 141-144

pressure outlet (outlet), Setting: Value:
Backflow Turbulent Intensity: 5 [%]
Backflow Turbulent Viscosity Ratio: 4

.. GENERATED FROM PYTHON SOURCE LINES 144-149

.. code-block:: default


    session.solver.root.setup.boundary_conditions.pressure_outlet[
        "outlet"
    ].turb_viscosity_ratio = 4








.. GENERATED FROM PYTHON SOURCE LINES 150-151

Disable the plotting of residuals during the calculation.

.. GENERATED FROM PYTHON SOURCE LINES 151-154

.. code-block:: default


    session.solver.tui.solve.monitors.residual.plot("no")








.. GENERATED FROM PYTHON SOURCE LINES 155-156

Initialize the flow field using the Hybrid Initialization

.. GENERATED FROM PYTHON SOURCE LINES 156-159

.. code-block:: default


    session.solver.root.solution.initialization.hybrid_initialize()








.. GENERATED FROM PYTHON SOURCE LINES 160-161

Solve for 150 Iterations.

.. GENERATED FROM PYTHON SOURCE LINES 161-165

.. code-block:: default


    session.solver.root.solution.run_calculation.iterate.get_attr("arguments")
    session.solver.root.solution.run_calculation.iterate(number_of_iterations=150)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    False



.. GENERATED FROM PYTHON SOURCE LINES 166-167

Create and display velocity vectors on the symmetry-xyplane plane.

.. GENERATED FROM PYTHON SOURCE LINES 167-184

.. code-block:: default


    session.solver.root.results.graphics.vector["velocity_vector_symmetry"] = {}
    session.solver.root.results.graphics.vector["velocity_vector_symmetry"].print_state()
    session.solver.root.results.graphics.vector[
        "velocity_vector_symmetry"
    ].field = "temperature"
    session.solver.root.results.graphics.vector[
        "velocity_vector_symmetry"
    ].surfaces_list = [
        "symmetry-xyplane",
    ]
    session.solver.root.results.graphics.vector[
        "velocity_vector_symmetry"
    ].scale.scale_f = 4
    session.solver.root.results.graphics.vector["velocity_vector_symmetry"].style = "arrow"
    # session.solver.root.results.graphics.vector["velocity_vector_symmetry"].display()








.. GENERATED FROM PYTHON SOURCE LINES 185-186

Compute mass flow rate

.. GENERATED FROM PYTHON SOURCE LINES 186-199

.. code-block:: default


    session.solver.root.solution.report_definitions.flux["mass_flow_rate"] = {}
    session.solver.root.solution.report_definitions.flux[
        "mass_flow_rate"
    ].zone_names.get_attr("allowed-values")
    session.solver.root.solution.report_definitions.flux["mass_flow_rate"].zone_names = [
        "cold-inlet",
        "hot-inlet",
        "outlet",
    ]
    session.solver.root.solution.report_definitions.flux["mass_flow_rate"].print_state()
    session.solver.root.solution.report_definitions.compute(report_defs=["mass_flow_rate"])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    {'mass_flow_rate': [-2.709270807699227e-09, 0]}



.. GENERATED FROM PYTHON SOURCE LINES 200-201

Mesh display using PyVista

.. GENERATED FROM PYTHON SOURCE LINES 201-216

.. code-block:: default


    graphics_session = Graphics(session)
    mesh_1 = graphics_session.Meshes["mesh-1"]
    mesh_1.show_edges = True
    mesh_1.surfaces_list = [
        "cold-inlet",
        "hot-inlet",
        "wall-elbow",
        "wall-inlet",
        "symmetry-xyplane",
        "outlet",
    ]

    mesh_1.display()




.. image-sg:: /examples/00-fluent/images/sphx_glr_mixing_elbow_settings_api_001.png
   :alt: mixing elbow settings api
   :srcset: /examples/00-fluent/images/sphx_glr_mixing_elbow_settings_api_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 217-218

Temperature Contour display using PyVista

.. GENERATED FROM PYTHON SOURCE LINES 218-224

.. code-block:: default


    contour_1 = graphics_session.Contours["contour_1"]
    contour_1.field = "temperature"
    contour_1.surfaces_list = ["symmetry-xyplane"]
    contour_1.display()




.. image-sg:: /examples/00-fluent/images/sphx_glr_mixing_elbow_settings_api_002.png
   :alt: mixing elbow settings api
   :srcset: /examples/00-fluent/images/sphx_glr_mixing_elbow_settings_api_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 225-227

Write final case and data.
session.solver.tui.file.write_case_data('mixing_elbow2_set.cas.h5')

.. GENERATED FROM PYTHON SOURCE LINES 229-230

Close Fluent

.. GENERATED FROM PYTHON SOURCE LINES 230-232

.. code-block:: default


    session.exit()








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  1.691 seconds)


.. _sphx_glr_download_examples_00-fluent_mixing_elbow_settings_api.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: mixing_elbow_settings_api.py <mixing_elbow_settings_api.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: mixing_elbow_settings_api.ipynb <mixing_elbow_settings_api.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
