
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/00-fluent/exhaust_system.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_00-fluent_exhaust_system.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_00-fluent_exhaust_system.py:

.. _ref_exhaust_system_tui_api:

Exhaust System: Fault-tolerant Meshing
----------------------------------------------

This tutorial illustrates the setup and solution of a three-dimensional
turbulent fluid flow in a manifold exhaust system. The manifold configuration
is encountered in the automotive industry. It is often important to predict
the flow field in the area of the mixing region in order to properly design
the junction. You will use the Fault-tolerant Meshing guided workflow, which
unlike the watertight workflow used in Fluid Flow in a Mixing Elbow, is
appropriate for geometries with imperfections, such as gaps and leakages.

This tutorial demonstrates how to do the following in Ansys Fluent:


- Use the Fault-tolerant Meshing guided workflow to:
    - Import a CAD geometry and manage individual parts
    - Generate a surface mesh
    - Cap inlets and outlets
    - Extract a fluid region
    - Define leakages
    - Extract edge features
    - Setup size controls
    - Generate a volume mesh
- Set up appropriate physics and boundary conditions.
- Calculate a solution.
- Review the results of the simulation.

Problem Description:

Air flows through the three inlets with a uniform velocity of 1 m/s, and then
exits through the outlet. A small pipe is placed in the main portion of the
manifold where edge extraction will be considered. There is also a known small
leakage included that will be addressed in the meshing portion of the tutorial
to demonstrate the automatic leakage detection aspects of the meshing workflow.

.. GENERATED FROM PYTHON SOURCE LINES 40-41

First, connect with a Fluent server

.. GENERATED FROM PYTHON SOURCE LINES 41-49

.. code-block:: default


    import ansys.fluent.core as pyfluent
    from ansys.fluent.core import examples

    import_filename = examples.download_file(
        "exhaust_system.fmd", "pyfluent/exhaust_system"
    )








.. GENERATED FROM PYTHON SOURCE LINES 50-51

Start Fluent in double precision running on 2 processors

.. GENERATED FROM PYTHON SOURCE LINES 51-56

.. code-block:: default


    session = pyfluent.launch_fluent(
        meshing_mode=True, precision="double", processor_count=4
    )








.. GENERATED FROM PYTHON SOURCE LINES 57-58

Select the Fault Tolerant Meshing Workflow

.. GENERATED FROM PYTHON SOURCE LINES 58-61

.. code-block:: default


    session.meshing.workflow.InitializeWorkflow(WorkflowType="Fault-tolerant Meshing")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 62-64

Import the CAD geometry (exhaust_system.fmd). Perform some selective part
management.

.. GENERATED FROM PYTHON SOURCE LINES 64-99

.. code-block:: default


    session.meshing.PartManagement.InputFileChanged(
        FilePath=import_filename, IgnoreSolidNames=False, PartPerBody=False
    )
    session.meshing.PMFileManagement.FileManager.LoadFiles()
    session.meshing.PartManagement.Node["Meshing Model"].Copy(
        Paths=[
            "/dirty_manifold-for-wrapper," + "1/dirty_manifold-for-wrapper,1/main,1",
            "/dirty_manifold-for-wrapper," + "1/dirty_manifold-for-wrapper,1/flow-pipe,1",
            "/dirty_manifold-for-wrapper," + "1/dirty_manifold-for-wrapper,1/outpipe3,1",
            "/dirty_manifold-for-wrapper," + "1/dirty_manifold-for-wrapper,1/object2,1",
            "/dirty_manifold-for-wrapper," + "1/dirty_manifold-for-wrapper,1/object1,1",
        ]
    )
    session.meshing.PartManagement.ObjectSetting[
        "DefaultObjectSetting"
    ].OneZonePer.setState("part")
    session.meshing.workflow.TaskObject[
        "Import CAD and Part Management"
    ].Arguments.setState(
        {
            "Context": 0,
            "CreateObjectPer": "Custom",
            "FMDFileName": import_filename,
            "FileLoaded": "yes",
            "ObjectSetting": "DefaultObjectSetting",
            "Options": {
                "Line": False,
                "Solid": False,
                "Surface": False,
            },
        }
    )
    session.meshing.workflow.TaskObject["Import CAD and Part Management"].Execute()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    '*the-non-printing-object*'



.. GENERATED FROM PYTHON SOURCE LINES 100-101

Provide a description for the geometry and the flow characteristics.

.. GENERATED FROM PYTHON SOURCE LINES 101-128

.. code-block:: default


    session.meshing.workflow.TaskObject["Describe Geometry and Flow"].Arguments.setState(
        {
            "AddEnclosure": "No",
            "CloseCaps": "Yes",
            "FlowType": "Internal flow through the object",
        }
    )
    session.meshing.workflow.TaskObject["Describe Geometry and Flow"].UpdateChildTasks(
        SetupTypeChanged=False
    )
    session.meshing.workflow.TaskObject["Describe Geometry and Flow"].Arguments.setState(
        {
            "AddEnclosure": "No",
            "CloseCaps": "Yes",
            "DescribeGeometryAndFlowOptions": {
                "AdvancedOptions": True,
                "ExtractEdgeFeatures": "Yes",
            },
            "FlowType": "Internal flow through the object",
        }
    )
    session.meshing.workflow.TaskObject["Describe Geometry and Flow"].UpdateChildTasks(
        SetupTypeChanged=False
    )
    session.meshing.workflow.TaskObject["Describe Geometry and Flow"].Execute()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 129-130

Cover any openings in your geometry.

.. GENERATED FROM PYTHON SOURCE LINES 130-288

.. code-block:: default


    session.meshing.workflow.TaskObject[
        "Enclose Fluid Regions (Capping)"
    ].Arguments.setState(
        {
            "CreatePatchPreferences": {
                "ShowCreatePatchPreferences": False,
            },
            "PatchName": "inlet-1",
            "SelectionType": "zone",
            "ZoneSelectionList": ["inlet.1"],
        }
    )
    session.meshing.workflow.TaskObject[
        "Enclose Fluid Regions (Capping)"
    ].Arguments.setState(
        {
            "CreatePatchPreferences": {
                "ShowCreatePatchPreferences": False,
            },
            "PatchName": "inlet-1",
            "SelectionType": "zone",
            "ZoneLocation": [
                "1",
                "351.68205",
                "-361.34322",
                "-301.88668",
                "396.96205",
                "-332.84759",
                "-266.69751",
                "inlet.1",
            ],
            "ZoneSelectionList": ["inlet.1"],
        }
    )
    session.meshing.workflow.TaskObject["Enclose Fluid Regions (Capping)"].AddChildToTask()

    session.meshing.workflow.TaskObject[
        "Enclose Fluid Regions (Capping)"
    ].InsertCompoundChildTask()
    session.meshing.workflow.TaskObject[
        "Enclose Fluid Regions (Capping)"
    ].Arguments.setState({})
    session.meshing.workflow.TaskObject["inlet-1"].Execute()
    session.meshing.workflow.TaskObject[
        "Enclose Fluid Regions (Capping)"
    ].Arguments.setState(
        {
            "PatchName": "inlet-2",
            "SelectionType": "zone",
            "ZoneSelectionList": ["inlet.2"],
        }
    )
    session.meshing.workflow.TaskObject[
        "Enclose Fluid Regions (Capping)"
    ].Arguments.setState(
        {
            "PatchName": "inlet-2",
            "SelectionType": "zone",
            "ZoneLocation": [
                "1",
                "441.68205",
                "-361.34322",
                "-301.88668",
                "486.96205",
                "-332.84759",
                "-266.69751",
                "inlet.2",
            ],
            "ZoneSelectionList": ["inlet.2"],
        }
    )
    session.meshing.workflow.TaskObject["Enclose Fluid Regions (Capping)"].AddChildToTask()

    session.meshing.workflow.TaskObject[
        "Enclose Fluid Regions (Capping)"
    ].InsertCompoundChildTask()
    session.meshing.workflow.TaskObject[
        "Enclose Fluid Regions (Capping)"
    ].Arguments.setState({})
    session.meshing.workflow.TaskObject["inlet-2"].Execute()
    session.meshing.workflow.TaskObject[
        "Enclose Fluid Regions (Capping)"
    ].Arguments.setState(
        {
            "PatchName": "inlet-3",
            "SelectionType": "zone",
            "ZoneSelectionList": ["inlet"],
        }
    )
    session.meshing.workflow.TaskObject[
        "Enclose Fluid Regions (Capping)"
    ].Arguments.setState(
        {
            "PatchName": "inlet-3",
            "SelectionType": "zone",
            "ZoneLocation": [
                "1",
                "261.68205",
                "-361.34322",
                "-301.88668",
                "306.96205",
                "-332.84759",
                "-266.69751",
                "inlet",
            ],
            "ZoneSelectionList": ["inlet"],
        }
    )
    session.meshing.workflow.TaskObject["Enclose Fluid Regions (Capping)"].AddChildToTask()

    session.meshing.workflow.TaskObject[
        "Enclose Fluid Regions (Capping)"
    ].InsertCompoundChildTask()
    session.meshing.workflow.TaskObject[
        "Enclose Fluid Regions (Capping)"
    ].Arguments.setState({})
    session.meshing.workflow.TaskObject["inlet-3"].Execute()
    session.meshing.workflow.TaskObject[
        "Enclose Fluid Regions (Capping)"
    ].Arguments.setState(
        {
            "PatchName": "outlet-1",
            "SelectionType": "zone",
            "ZoneSelectionList": ["outlet"],
            "ZoneType": "pressure-outlet",
        }
    )
    session.meshing.workflow.TaskObject[
        "Enclose Fluid Regions (Capping)"
    ].Arguments.setState(
        {
            "PatchName": "outlet-1",
            "SelectionType": "zone",
            "ZoneLocation": [
                "1",
                "352.22702",
                "-197.8957",
                "84.102381",
                "394.41707",
                "-155.70565",
                "84.102381",
                "outlet",
            ],
            "ZoneSelectionList": ["outlet"],
            "ZoneType": "pressure-outlet",
        }
    )
    session.meshing.workflow.TaskObject["Enclose Fluid Regions (Capping)"].AddChildToTask()

    session.meshing.workflow.TaskObject[
        "Enclose Fluid Regions (Capping)"
    ].InsertCompoundChildTask()
    session.meshing.workflow.TaskObject[
        "Enclose Fluid Regions (Capping)"
    ].Arguments.setState({})
    session.meshing.workflow.TaskObject["outlet-1"].Execute()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 289-290

Extract edge features.

.. GENERATED FROM PYTHON SOURCE LINES 290-312

.. code-block:: default


    session.meshing.workflow.TaskObject["Extract Edge Features"].Arguments.setState(
        {
            "ExtractMethodType": "Intersection Loops",
            "ObjectSelectionList": ["flow_pipe", "main"],
        }
    )
    session.meshing.workflow.TaskObject["Extract Edge Features"].AddChildToTask()

    session.meshing.workflow.TaskObject["Extract Edge Features"].InsertCompoundChildTask()

    session.meshing.workflow.TaskObject["edge-group-1"].Arguments.setState(
        {
            "ExtractEdgesName": "edge-group-1",
            "ExtractMethodType": "Intersection Loops",
            "ObjectSelectionList": ["flow_pipe", "main"],
        }
    )
    session.meshing.workflow.TaskObject["Extract Edge Features"].Arguments.setState({})

    session.meshing.workflow.TaskObject["edge-group-1"].Execute()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 313-314

Identify regions.

.. GENERATED FROM PYTHON SOURCE LINES 314-388

.. code-block:: default


    session.meshing.workflow.TaskObject["Identify Regions"].Arguments.setState(
        {
            "SelectionType": "zone",
            "X": 377.322045740589,
            "Y": -176.800676988458,
            "Z": -37.0764628583475,
            "ZoneSelectionList": ["main.1"],
        }
    )
    session.meshing.workflow.TaskObject["Identify Regions"].Arguments.setState(
        {
            "SelectionType": "zone",
            "X": 377.322045740589,
            "Y": -176.800676988458,
            "Z": -37.0764628583475,
            "ZoneLocation": [
                "1",
                "213.32205",
                "-225.28068",
                "-158.25531",
                "541.32205",
                "-128.32068",
                "84.102381",
                "main.1",
            ],
            "ZoneSelectionList": ["main.1"],
        }
    )
    session.meshing.workflow.TaskObject["Identify Regions"].AddChildToTask()

    session.meshing.workflow.TaskObject["Identify Regions"].InsertCompoundChildTask()

    session.meshing.workflow.TaskObject["fluid-region-1"].Arguments.setState(
        {
            "MaterialPointsName": "fluid-region-1",
            "SelectionType": "zone",
            "X": 377.322045740589,
            "Y": -176.800676988458,
            "Z": -37.0764628583475,
            "ZoneLocation": [
                "1",
                "213.32205",
                "-225.28068",
                "-158.25531",
                "541.32205",
                "-128.32068",
                "84.102381",
                "main.1",
            ],
            "ZoneSelectionList": ["main.1"],
        }
    )
    session.meshing.workflow.TaskObject["Identify Regions"].Arguments.setState({})

    session.meshing.workflow.TaskObject["fluid-region-1"].Execute()
    session.meshing.workflow.TaskObject["Identify Regions"].Arguments.setState(
        {
            "MaterialPointsName": "void-region-1",
            "NewRegionType": "void",
            "ObjectSelectionList": ["inlet-1", "inlet-2", "inlet-3", "main"],
            "X": 374.722045740589,
            "Y": -278.9775145640143,
            "Z": -161.1700719416913,
        }
    )
    session.meshing.workflow.TaskObject["Identify Regions"].AddChildToTask()

    session.meshing.workflow.TaskObject["Identify Regions"].InsertCompoundChildTask()

    session.meshing.workflow.TaskObject["Identify Regions"].Arguments.setState({})

    session.meshing.workflow.TaskObject["void-region-1"].Execute()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 389-390

Define thresholds for any potential leakages.

.. GENERATED FROM PYTHON SOURCE LINES 390-420

.. code-block:: default


    session.meshing.workflow.TaskObject["Define Leakage Threshold"].Arguments.setState(
        {
            "AddChild": "yes",
            "FlipDirection": True,
            "PlaneDirection": "X",
            "RegionSelectionSingle": "void-region-1",
        }
    )
    session.meshing.workflow.TaskObject["Define Leakage Threshold"].AddChildToTask()

    session.meshing.workflow.TaskObject[
        "Define Leakage Threshold"
    ].InsertCompoundChildTask()
    session.meshing.workflow.TaskObject["leakage-1"].Arguments.setState(
        {
            "AddChild": "yes",
            "FlipDirection": True,
            "LeakageName": "leakage-1",
            "PlaneDirection": "X",
            "RegionSelectionSingle": "void-region-1",
        }
    )
    session.meshing.workflow.TaskObject["Define Leakage Threshold"].Arguments.setState(
        {
            "AddChild": "yes",
        }
    )
    session.meshing.workflow.TaskObject["leakage-1"].Execute()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 421-422

Review your region settings.

.. GENERATED FROM PYTHON SOURCE LINES 422-460

.. code-block:: default


    session.meshing.workflow.TaskObject["Update Region Settings"].Arguments.setState(
        {
            "AllRegionFilterCategories": ["2"] * 5 + ["1"] * 2,
            "AllRegionLeakageSizeList": ["none"] * 6 + ["6.4"],
            "AllRegionLinkedConstructionSurfaceList": ["n/a"] * 6 + ["no"],
            "AllRegionMeshMethodList": ["none"] * 6 + ["wrap"],
            "AllRegionNameList": [
                "main",
                "flow_pipe",
                "outpipe3",
                "object2",
                "object1",
                "void-region-1",
                "fluid-region-1",
            ],
            "AllRegionOversetComponenList": ["no"] * 7,
            "AllRegionSourceList": ["object"] * 5 + ["mpt"] * 2,
            "AllRegionTypeList": ["void"] * 6 + ["fluid"],
            "AllRegionVolumeFillList": ["none"] * 6 + ["tet"],
            "FilterCategory": "Identified Regions",
            "OldRegionLeakageSizeList": [""],
            "OldRegionMeshMethodList": ["wrap"],
            "OldRegionNameList": ["fluid-region-1"],
            "OldRegionOversetComponenList": ["no"],
            "OldRegionTypeList": ["fluid"],
            "OldRegionVolumeFillList": ["hexcore"],
            "RegionLeakageSizeList": [""],
            "RegionMeshMethodList": ["wrap"],
            "RegionNameList": ["fluid-region-1"],
            "RegionOversetComponenList": ["no"],
            "RegionTypeList": ["fluid"],
            "RegionVolumeFillList": ["tet"],
        }
    )
    session.meshing.workflow.TaskObject["Update Region Settings"].Execute()






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 461-462

Select options for controlling the mesh.

.. GENERATED FROM PYTHON SOURCE LINES 462-465

.. code-block:: default


    session.meshing.workflow.TaskObject["Choose Mesh Control Options"].Execute()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 466-467

Generate the surface mesh.

.. GENERATED FROM PYTHON SOURCE LINES 467-470

.. code-block:: default


    session.meshing.workflow.TaskObject["Generate the Surface Mesh"].Execute()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 471-472

Confirm and update the boundaries.

.. GENERATED FROM PYTHON SOURCE LINES 472-475

.. code-block:: default


    session.meshing.workflow.TaskObject["Update Boundaries"].Execute()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 476-477

Add boundary layers.

.. GENERATED FROM PYTHON SOURCE LINES 477-491

.. code-block:: default


    session.meshing.workflow.TaskObject["Add Boundary Layers"].AddChildToTask()

    session.meshing.workflow.TaskObject["Add Boundary Layers"].InsertCompoundChildTask()

    session.meshing.workflow.TaskObject["aspect-ratio_1"].Arguments.setState(
        {
            "BLControlName": "aspect-ratio_1",
        }
    )
    session.meshing.workflow.TaskObject["Add Boundary Layers"].Arguments.setState({})

    session.meshing.workflow.TaskObject["aspect-ratio_1"].Execute()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 492-493

Generate the volume mesh.

.. GENERATED FROM PYTHON SOURCE LINES 493-512

.. code-block:: default


    session.meshing.workflow.TaskObject["Generate the Volume Mesh"].Arguments.setState(
        {
            "AllRegionNameList": [
                "main",
                "flow_pipe",
                "outpipe3",
                "object2",
                "object1",
                "void-region-1",
                "fluid-region-1",
            ],
            "AllRegionSizeList": ["11.33375"] * 7,
            "AllRegionVolumeFillList": ["none"] * 6 + ["tet"],
            "EnableParallel": True,
        }
    )
    session.meshing.workflow.TaskObject["Generate the Volume Mesh"].Execute()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 513-514

Check the mesh.

.. GENERATED FROM PYTHON SOURCE LINES 514-517

.. code-block:: default


    session.meshing.tui.mesh.check_mesh()








.. GENERATED FROM PYTHON SOURCE LINES 518-519

Switch to Solution mode.

.. GENERATED FROM PYTHON SOURCE LINES 519-524

.. code-block:: default


    session.meshing.tui.switch_to_solution_mode("yes")

    session.solver.tui.mesh.check()








.. GENERATED FROM PYTHON SOURCE LINES 525-526

Set the units for length

.. GENERATED FROM PYTHON SOURCE LINES 526-529

.. code-block:: default


    session.solver.tui.define.units("length", "mm")








.. GENERATED FROM PYTHON SOURCE LINES 530-531

Select kw sst turbulence model

.. GENERATED FROM PYTHON SOURCE LINES 531-534

.. code-block:: default


    session.solver.tui.define.models.viscous.kw_sst("yes")








.. GENERATED FROM PYTHON SOURCE LINES 535-537

Set the velocity and turbulence boundary conditions for the first inlet
(inlet-1).

.. GENERATED FROM PYTHON SOURCE LINES 537-542

.. code-block:: default


    session.solver.tui.define.boundary_conditions.set.velocity_inlet(
        "inlet-1", [], "vmag", "no", 1, "quit"
    )








.. GENERATED FROM PYTHON SOURCE LINES 543-545

Apply the same conditions for the other velocity inlet boundaries (inlet_2,
and inlet_3).

.. GENERATED FROM PYTHON SOURCE LINES 545-550

.. code-block:: default


    session.solver.tui.define.boundary_conditions.copy_bc(
        "inlet-1", "inlet-2", "inlet-3", ()
    )








.. GENERATED FROM PYTHON SOURCE LINES 551-552

Set the boundary conditions at the outlet (outlet-1).

.. GENERATED FROM PYTHON SOURCE LINES 552-558

.. code-block:: default


    session.solver.tui.define.boundary_conditions.set.pressure_outlet(
        "outlet-1", [], "turb-intensity", 5, "quit"
    )
    session.solver.tui.solve.monitors.residual.plot("yes")








.. GENERATED FROM PYTHON SOURCE LINES 559-560

Initialize the flow field using the Initialization

.. GENERATED FROM PYTHON SOURCE LINES 560-563

.. code-block:: default


    session.solver.tui.solve.initialize.hyb_initialization()








.. GENERATED FROM PYTHON SOURCE LINES 564-565

Start the calculation by requesting 100 iterations

.. GENERATED FROM PYTHON SOURCE LINES 565-571

.. code-block:: default


    session.solver.tui.solve.set.number_of_iterations(100)
    session.solver.tui.solve.iterate()

    # session.solver.tui.report.volume_integrals.volume("fluid-region-1","()","yes","volume.vrp")








.. GENERATED FROM PYTHON SOURCE LINES 572-573

Display path lines highlighting the flow field

.. GENERATED FROM PYTHON SOURCE LINES 573-593

.. code-block:: default


    session.solver.tui.display.objects.create(
        "pathlines",
        "pathlines-1",
        "field",
        "time",
        "accuracy-control",
        "tolerance",
        "0.001",
        "skip",
        "5",
        "surfaces-list",
        "inlet-1",
        "inlet-2",
        "inlet-3",
        "()",
        "quit",
    )
    # session.solver.tui.display.objects.display("pathlines-1")








.. GENERATED FROM PYTHON SOURCE LINES 594-595

Create an iso-surface through the manifold geometry.

.. GENERATED FROM PYTHON SOURCE LINES 595-606

.. code-block:: default


    session.solver.tui.surface.iso_surface(
        "x-coordinate",
        "surf-x-coordinate",
        "()",
        "fluid-region-1",
        "()",
        "380",
        "()",
    )








.. GENERATED FROM PYTHON SOURCE LINES 607-609

Create and define contours of velocity magnitude throughout the manifold
along with the mesh.

.. GENERATED FROM PYTHON SOURCE LINES 609-633

.. code-block:: default


    session.solver.tui.display.objects.create(
        "contour",
        "contour-velocity",
        "field",
        "velocity-magnitude",
        "surfaces-list",
        "surf-x-coordinate",
        "()",
        "node-values?",
        "no",
        "range-option",
        "auto-range-on",
        "global-range?",
        "no",
        "quit",
        "quit",
    )
    # session.solver.tui.display.objects.display("contour-velocity")

    session.solver.tui.display.objects.create(
        "mesh", "mesh-1", "surfaces-list", "*", "()", "quit"
    )








.. GENERATED FROM PYTHON SOURCE LINES 634-635

Create a scene containing the mesh and the contours.

.. GENERATED FROM PYTHON SOURCE LINES 635-653

.. code-block:: default


    session.solver.tui.display.objects.create(
        "scene",
        "scene-1",
        "graphics-objects",
        "add",
        "mesh-1",
        "transparency",
        "90",
        "quit",
        "add",
        "contour-velocity",
        "quit",
        "quit",
        "quit",
    )
    # session.solver.tui.display.objects.display("scene-1")








.. GENERATED FROM PYTHON SOURCE LINES 654-656

Save case, data and exit.
session.solver.tui.file.write_case_data("exhaust_system.cas.h5")

.. GENERATED FROM PYTHON SOURCE LINES 656-658

.. code-block:: default


    # session.exit()








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 7 minutes  23.622 seconds)


.. _sphx_glr_download_examples_00-fluent_exhaust_system.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: exhaust_system.py <exhaust_system.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: exhaust_system.ipynb <exhaust_system.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
