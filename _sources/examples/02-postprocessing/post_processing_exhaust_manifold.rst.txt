
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/02-postprocessing/post_processing_exhaust_manifold.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_02-postprocessing_post_processing_exhaust_manifold.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_02-postprocessing_post_processing_exhaust_manifold.py:

.. _ref_post_processing_exhaust_manifold:

Post Processing using PyVista and Matplotlib: Exhaust Manifold
----------------------------------------------------------------------
This example demonstrates the postprocessing capabilities of PyFluent
(using PyVista and Matplotlib) using a 3D model
of an exhaust manifold with high temperature flows passing through.
The flow through the manifold is turbulent and
involves conjugate heat transfer.

This example demonstrates how to do the following:

- Create surfaces for the display of 3D data.
- Display filled contours of temperature on several surfaces.
- Display velocity vectors.
- Plot quantitative results using Matplotlib

.. GENERATED FROM PYTHON SOURCE LINES 19-27

.. code-block:: default

    import ansys.fluent.core as pyfluent
    from ansys.fluent.core import examples
    from ansys.fluent.post import set_config
    from ansys.fluent.post.matplotlib import Plots
    from ansys.fluent.post.pyvista import Graphics

    set_config(blocking=True, set_view_on_display="isometric")








.. GENERATED FROM PYTHON SOURCE LINES 28-30

First, download the case and data file and start Fluent as a service with
Meshing mode, double precision, number of processors: 4

.. GENERATED FROM PYTHON SOURCE LINES 30-45

.. code-block:: default


    import_case = examples.download_file(
        filename="manifold_solution.cas.h5", directory="pyfluent/exhaust_manifold"
    )

    import_data = examples.download_file(
        filename="manifold_solution.dat.h5", directory="pyfluent/exhaust_manifold"
    )

    session = pyfluent.launch_fluent(precision="double", processor_count=2)
    root = session.get_settings_root()

    session.tui.solver.file.read_case(case_file_name=import_case)
    session.tui.solver.file.read_data(case_file_name=import_data)








.. GENERATED FROM PYTHON SOURCE LINES 46-47

Get the graphics object for mesh display

.. GENERATED FROM PYTHON SOURCE LINES 47-50

.. code-block:: default


    graphics = Graphics(session=session)








.. GENERATED FROM PYTHON SOURCE LINES 51-52

Create a graphics object for mesh display

.. GENERATED FROM PYTHON SOURCE LINES 52-55

.. code-block:: default


    mesh1 = graphics.Meshes["mesh-1"]








.. GENERATED FROM PYTHON SOURCE LINES 56-57

Show edges and faces

.. GENERATED FROM PYTHON SOURCE LINES 57-61

.. code-block:: default


    mesh1.show_edges = True
    mesh1.show_faces = True








.. GENERATED FROM PYTHON SOURCE LINES 62-63

Get the surfaces list

.. GENERATED FROM PYTHON SOURCE LINES 63-75

.. code-block:: default


    mesh1.surfaces_list = [
        "in1",
        "in2",
        "in3",
        "out1",
        "solid_up:1",
        "solid_up:1:830",
        "solid_up:1:830-shadow",
    ]
    mesh1.display("window-1")




.. image-sg:: /examples/02-postprocessing/images/sphx_glr_post_processing_exhaust_manifold_001.png
   :alt: post processing exhaust manifold
   :srcset: /examples/02-postprocessing/images/sphx_glr_post_processing_exhaust_manifold_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 76-77

Disable edges and display again

.. GENERATED FROM PYTHON SOURCE LINES 77-81

.. code-block:: default


    mesh1.show_edges = False
    mesh1.display("window-2")




.. image-sg:: /examples/02-postprocessing/images/sphx_glr_post_processing_exhaust_manifold_002.png
   :alt: post processing exhaust manifold
   :srcset: /examples/02-postprocessing/images/sphx_glr_post_processing_exhaust_manifold_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 82-83

Create iso-surface on the outlet plane

.. GENERATED FROM PYTHON SOURCE LINES 83-91

.. code-block:: default


    surf_outlet_plane = graphics.Surfaces["outlet-plane"]
    surf_outlet_plane.surface.type = "iso-surface"
    iso_surf1 = surf_outlet_plane.surface.iso_surface
    iso_surf1.field = "y-coordinate"
    iso_surf1.iso_value = -0.125017
    surf_outlet_plane.display("window-3")




.. image-sg:: /examples/02-postprocessing/images/sphx_glr_post_processing_exhaust_manifold_003.png
   :alt: post processing exhaust manifold
   :srcset: /examples/02-postprocessing/images/sphx_glr_post_processing_exhaust_manifold_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 92-93

Create iso-surface on the mid-plane (Issue # 276)

.. GENERATED FROM PYTHON SOURCE LINES 93-101

.. code-block:: default


    surf_mid_plane_x = graphics.Surfaces["mid-plane-x"]
    surf_mid_plane_x.surface.type = "iso-surface"
    iso_surf2 = surf_mid_plane_x.surface.iso_surface
    iso_surf2.field = "x-coordinate"
    iso_surf2.iso_value = -0.174
    surf_mid_plane_x.display("window-4")




.. image-sg:: /examples/02-postprocessing/images/sphx_glr_post_processing_exhaust_manifold_004.png
   :alt: post processing exhaust manifold
   :srcset: /examples/02-postprocessing/images/sphx_glr_post_processing_exhaust_manifold_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 102-103

Temperature contour on the mid-plane and the outlet

.. GENERATED FROM PYTHON SOURCE LINES 103-109

.. code-block:: default


    temperature_contour = graphics.Contours["contour-temperature"]
    temperature_contour.field = "temperature"
    temperature_contour.surfaces_list = ["mid-plane-x", "outlet-plane"]
    temperature_contour.display("window-4")




.. image-sg:: /examples/02-postprocessing/images/sphx_glr_post_processing_exhaust_manifold_005.png
   :alt: post processing exhaust manifold
   :srcset: /examples/02-postprocessing/images/sphx_glr_post_processing_exhaust_manifold_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 110-111

Contour plot of temperature on the manifold

.. GENERATED FROM PYTHON SOURCE LINES 111-124

.. code-block:: default


    temperature_contour_manifold = graphics.Contours["contour-temperature-manifold"]
    temperature_contour_manifold.field = "temperature"
    temperature_contour_manifold.surfaces_list = [
        "in1",
        "in2",
        "in3",
        "out1",
        "solid_up:1",
        "solid_up:1:830",
    ]
    temperature_contour_manifold.display("window-5")




.. image-sg:: /examples/02-postprocessing/images/sphx_glr_post_processing_exhaust_manifold_006.png
   :alt: post processing exhaust manifold
   :srcset: /examples/02-postprocessing/images/sphx_glr_post_processing_exhaust_manifold_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 125-127

Vector on the mid-plane
Currently using outlet-plane since mid-plane is affected by Issue # 276

.. GENERATED FROM PYTHON SOURCE LINES 127-133

.. code-block:: default


    velocity_vector = graphics.Vectors["velocity-vector"]
    velocity_vector.surfaces_list = ["outlet-plane"]
    velocity_vector.scale = 1
    velocity_vector.display("window-6")




.. image-sg:: /examples/02-postprocessing/images/sphx_glr_post_processing_exhaust_manifold_007.png
   :alt: post processing exhaust manifold
   :srcset: /examples/02-postprocessing/images/sphx_glr_post_processing_exhaust_manifold_007.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 134-136

Commenting out due to issue #290
Start the Plot Object for the session

.. GENERATED FROM PYTHON SOURCE LINES 136-138

.. code-block:: default

    plots_session_1 = Plots(session)








.. GENERATED FROM PYTHON SOURCE LINES 139-140

Create a default XY-Plot

.. GENERATED FROM PYTHON SOURCE LINES 140-142

.. code-block:: default

    plot_1 = plots_session_1.XYPlots["plot-1"]








.. GENERATED FROM PYTHON SOURCE LINES 143-144

Set the surface on which the plot is plotted and the Y-axis function

.. GENERATED FROM PYTHON SOURCE LINES 144-147

.. code-block:: default

    plot_1.surfaces_list = ["outlet"]
    plot_1.y_axis_function = "temperature"








.. GENERATED FROM PYTHON SOURCE LINES 148-149

Plot the created XY-Plot

.. GENERATED FROM PYTHON SOURCE LINES 149-150

.. code-block:: default

    plot_1.plot("window-7")



.. image-sg:: /examples/02-postprocessing/images/sphx_glr_post_processing_exhaust_manifold_008.png
   :alt: XY Plot
   :srcset: /examples/02-postprocessing/images/sphx_glr_post_processing_exhaust_manifold_008.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  56.875 seconds)


.. _sphx_glr_download_examples_02-postprocessing_post_processing_exhaust_manifold.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: post_processing_exhaust_manifold.py <post_processing_exhaust_manifold.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: post_processing_exhaust_manifold.ipynb <post_processing_exhaust_manifold.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
